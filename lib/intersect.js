// Generated by CoffeeScript 1.6.3
(function() {
  var AABB, Hit, Point, Sweep, abs, root, sign;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  abs = function(value) {
    if (value < 0) {
      return -value;
    } else {
      return value;
    }
  };

  sign = function(value) {
    if (value < 0) {
      return -1;
    } else {
      return 1;
    }
  };

  root.Point = Point = (function() {
    function Point(x, y) {
      if (x == null) {
        x = 0;
      }
      if (y == null) {
        y = 0;
      }
      this.x = x;
      this.y = y;
    }

    Point.prototype.clone = function() {
      return new Point(this.x, this.y);
    };

    Point.prototype.normalize = function() {
      var invLength, length;
      length = this.x * this.x + this.y * this.y;
      if (length > 0) {
        length = Math.sqrt(length);
        invLength = 1.0 / length;
        this.x *= invLength;
        this.y *= invLength;
      }
      return length;
    };

    return Point;

  })();

  root.AABB = AABB = (function() {
    function AABB(pos, half) {
      this.pos = pos;
      this.half = half;
    }

    AABB.prototype.intersectPoint = function(point) {
      var dx, dy, hit, px, py, sx, sy;
      dx = point.x - this.pos.x;
      px = this.half.x - abs(dx);
      if (px <= 0) {
        return null;
      }
      dy = point.y - this.pos.y;
      py = this.half.y - abs(dy);
      if (py <= 0) {
        return null;
      }
      hit = new Hit();
      if (px < py) {
        sx = sign(dx);
        hit.delta.x = px * sx;
        hit.normal.x = sx;
        hit.pos.x = this.pos.x + (this.half.x * sx);
        hit.pos.y = point.y;
      } else {
        sy = sign(dy);
        hit.delta.y = py * sy;
        hit.normal.y = sy;
        hit.pos.x = point.x;
        hit.pos.y = this.pos.y + (this.half.y * sy);
      }
      return hit;
    };

    AABB.prototype.intersectSegment = function(pos, delta, paddingX, paddingY) {
      var farTime, farTimeX, farTimeY, hit, nearTime, nearTimeX, nearTimeY, scaleX, scaleY, signX, signY;
      if (paddingX == null) {
        paddingX = 0;
      }
      if (paddingY == null) {
        paddingY = 0;
      }
      scaleX = 1.0 / delta.x;
      scaleY = 1.0 / delta.y;
      signX = sign(scaleX);
      signY = sign(scaleY);
      nearTimeX = (this.pos.x - signX * (this.half.x + paddingX) - pos.x) * scaleX;
      nearTimeY = (this.pos.y - signY * (this.half.y + paddingY) - pos.y) * scaleY;
      farTimeX = (this.pos.x + signX * (this.half.x + paddingX) - pos.x) * scaleX;
      farTimeY = (this.pos.y + signY * (this.half.y + paddingY) - pos.y) * scaleY;
      if (nearTimeX > farTimeY || nearTimeY > farTimeX) {
        return null;
      }
      nearTime = nearTimeX > nearTimeY ? nearTimeX : nearTimeY;
      farTime = farTimeX < farTimeY ? farTimeX : farTimeY;
      if (nearTime >= 1) {
        return null;
      }
      if (nearTime < 0 && farTime < 0) {
        return null;
      }
      hit = new Hit();
      if (nearTime >= 0) {
        hit.time = nearTime;
      } else {
        hit.time = 0;
      }
      hit.normal.x = nearTimeX > nearTimeY ? -signX : 0;
      hit.normal.y = nearTimeX > nearTimeY ? 0 : -signY;
      hit.delta.x = hit.time * delta.x;
      hit.delta.y = hit.time * delta.y;
      hit.pos.x = pos.x + hit.delta.x;
      hit.pos.y = pos.y + hit.delta.y;
      return hit;
    };

    AABB.prototype.intersectAABB = function(box) {
      var dx, dy, hit, px, py, sx, sy;
      dx = box.pos.x - this.pos.x;
      px = (box.half.x + this.half.x) - abs(dx);
      if (px <= 0) {
        return null;
      }
      dy = box.pos.y - this.pos.y;
      py = (box.half.y + this.half.y) - abs(dy);
      if (py <= 0) {
        return null;
      }
      hit = new Hit();
      if (px < py) {
        sx = sign(dx);
        hit.delta.x = px * sx;
        hit.normal.x = sx;
        hit.pos.x = this.pos.x + (this.half.x * sx);
        hit.pos.y = box.pos.y;
      } else {
        sy = sign(dy);
        hit.delta.y = py * sy;
        hit.normal.y = sy;
        hit.pos.x = box.pos.x;
        hit.pos.y = this.pos.y + (this.half.y * sy);
      }
      return hit;
    };

    AABB.prototype.sweepAABB = function(box, delta) {
      var sweep;
      sweep = new Sweep();
      if (delta.x === 0 && delta.y === 0) {
        sweep.pos = box.pos.clone();
        sweep.hit = this.intersectAABB(box);
        if (sweep.hit != null) {
          sweep.hit.time = 0;
        }
      } else {
        sweep.hit = this.intersectSegment(box.pos, delta, box.half.x, box.half.y);
        if (sweep.hit != null) {
          sweep.pos = sweep.hit.pos.clone();
          sweep.hit.pos.x -= sweep.hit.normal.x * box.half.x;
          sweep.hit.pos.y -= sweep.hit.normal.y * box.half.y;
        } else {
          sweep.pos = new Point(box.pos.x + delta.x, box.pos.y + delta.y);
        }
      }
      return sweep;
    };

    return AABB;

  })();

  root.Hit = Hit = (function() {
    function Hit() {
      this.pos = new Point();
      this.delta = new Point();
      this.normal = new Point();
    }

    return Hit;

  })();

  root.Sweep = Sweep = (function() {
    function Sweep() {
      this.hit = null;
      this.pos = new Point();
    }

    return Sweep;

  })();

}).call(this);

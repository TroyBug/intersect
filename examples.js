// Generated by CoffeeScript 1.6.3
(function() {
  var AABBAABBExample, AABBSegmentExample, AABBSweptAABBExample, Example, MultipleAABBSweptAABBExample,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Example = (function() {
    function Example(context, width, height, offset) {
      this.context = context;
      this.width = width;
      this.height = height;
      this.origin = new Point(this.width * 0.5, this.height * 0.5 + offset);
      this.infiniteLength = Math.sqrt(this.width * this.width + this.height * this.height);
    }

    Example.prototype.drawAABB = function(box, color, thickness) {
      var x1, x2, y1, y2;
      if (color == null) {
        color = '#fff';
      }
      if (thickness == null) {
        thickness = 1;
      }
      x1 = Math.floor(this.origin.x + box.pos.x - box.half.x);
      y1 = Math.floor(this.origin.y + box.pos.y - box.half.y);
      x2 = Math.floor(this.origin.x + box.pos.x + box.half.x);
      y2 = Math.floor(this.origin.y + box.pos.y + box.half.y);
      this.context.beginPath();
      this.context.moveTo(x1, y1);
      this.context.lineTo(x2, y1);
      this.context.lineTo(x2, y2);
      this.context.lineTo(x1, y2);
      this.context.lineTo(x1, y1);
      this.context.closePath();
      this.context.lineWidth = thickness;
      this.context.strokeStyle = color;
      return this.context.stroke();
    };

    Example.prototype.drawCircle = function(circle, color, thickness) {
      var x, y;
      if (color == null) {
        color = '#fff';
      }
      if (thickness == null) {
        thickness = 1;
      }
      x = Math.floor(this.origin.x + circle.pos.x);
      y = Math.floor(this.origin.y + circle.pos.y);
      this.context.beginPath();
      this.context.arc(x, y, circle.radius, 0, 2 * Math.PI, true);
      this.context.closePath();
      this.context.lineWidth = thickness;
      this.context.strokeStyle = color;
      return this.context.stroke();
    };

    Example.prototype.drawPoint = function(point, color, text, thickness) {
      var x, y;
      if (color == null) {
        color = '#fff';
      }
      if (text == null) {
        text = '';
      }
      if (thickness == null) {
        thickness = 1;
      }
      x = Math.floor(this.origin.x + point.x - (thickness / 2));
      y = Math.floor(this.origin.y + point.y - (thickness / 2));
      this.context.lineWidth = thickness;
      this.context.fillStyle = color;
      this.context.strokeStyle = color;
      this.context.fillRect(x, y, thickness, thickness);
      this.context.strokeRect(x, y, thickness, thickness);
      if (text) {
        return this.context.fillText(text, x + thickness * 4, y + thickness * 2);
      }
    };

    Example.prototype.drawRay = function(pos, dir, length, color, arrow, thickness) {
      var pos2;
      if (color == null) {
        color = '#fff';
      }
      if (arrow == null) {
        arrow = true;
      }
      if (thickness == null) {
        thickness = 1;
      }
      pos2 = new Point(pos.x + dir.x * length, pos.y + dir.y * length);
      this.drawSegment(pos, pos2, color, thickness);
      if (arrow) {
        pos = pos2.clone();
        pos2.x = pos.x - dir.x * 4 + dir.y * 4;
        pos2.y = pos.y - dir.y * 4 - dir.x * 4;
        this.drawSegment(pos, pos2, color, thickness);
        pos2.x = pos.x - dir.x * 4 - dir.y * 4;
        pos2.y = pos.y - dir.y * 4 + dir.x * 4;
        return this.drawSegment(pos, pos2, color, thickness);
      }
    };

    Example.prototype.drawSegment = function(point1, point2, color, thickness) {
      var x1, x2, y1, y2;
      if (color == null) {
        color = '#fff';
      }
      if (thickness == null) {
        thickness = 1;
      }
      x1 = Math.floor(this.origin.x + point1.x);
      y1 = Math.floor(this.origin.y + point1.y);
      x2 = Math.floor(this.origin.x + point2.x);
      y2 = Math.floor(this.origin.y + point2.y);
      this.context.beginPath();
      this.context.moveTo(x1, y1);
      this.context.lineTo(x2, y2);
      this.context.closePath();
      this.context.lineWidth = thickness;
      this.context.strokeStyle = color;
      return this.context.stroke();
    };

    Example.prototype.tick = function(mouseX, mouseY, elapsed) {};

    return Example;

  })();

  AABBSegmentExample = (function(_super) {
    __extends(AABBSegmentExample, _super);

    function AABBSegmentExample() {
      AABBSegmentExample.__super__.constructor.apply(this, arguments);
      this.angle = 0;
      this.box = new AABB(new Point(0, 0), new Point(16, 16));
    }

    AABBSegmentExample.prototype.tick = function(mouseX, mouseY, elapsed) {
      var delta, dir, hit, length, pos1, pos2;
      this.angle += 0.5 * Math.PI * elapsed;
      pos1 = new Point(Math.cos(this.angle) * 64, Math.sin(this.angle) * 64);
      pos2 = new Point(Math.sin(this.angle) * 32, Math.cos(this.angle) * 32);
      delta = new Point(pos2.x - pos1.x, pos2.y - pos1.y);
      hit = this.box.intersectSegment(pos1, delta);
      dir = delta.clone();
      length = dir.normalize();
      this.drawAABB(this.box, '#666');
      if (hit != null) {
        this.drawRay(pos1, dir, length, '#f00');
        this.drawSegment(pos1, hit.pos, '#ff0');
        this.drawPoint(hit.pos, '#ff0');
        return this.drawRay(hit.pos, hit.normal, 6, '#ff0', false);
      } else {
        return this.drawRay(pos1, dir, length, '#0f0');
      }
    };

    return AABBSegmentExample;

  })(Example);

  AABBAABBExample = (function(_super) {
    __extends(AABBAABBExample, _super);

    function AABBAABBExample() {
      AABBAABBExample.__super__.constructor.apply(this, arguments);
      this.angle = 0;
      this.box1 = new AABB(new Point(0, 0), new Point(64, 16));
      this.box2 = new AABB(new Point(0, 0), new Point(16, 16));
    }

    AABBAABBExample.prototype.tick = function(mouseX, mouseY, elapsed) {
      var hit;
      this.angle += 0.2 * Math.PI * elapsed;
      this.box2.pos.x = Math.cos(this.angle) * 96;
      this.box2.pos.y = Math.sin(this.angle * 2.4) * 24;
      hit = this.box1.intersectAABB(this.box2);
      this.drawAABB(this.box1, '#666');
      if (hit != null) {
        this.drawAABB(this.box2, '#f00');
        this.box2.pos.x += hit.delta.x;
        this.box2.pos.y += hit.delta.y;
        this.drawAABB(this.box2, '#ff0');
        this.drawPoint(hit.pos, '#ff0');
        return this.drawRay(hit.pos, hit.normal, 4, '#ff0', false);
      } else {
        return this.drawAABB(this.box2, '#0f0');
      }
    };

    return AABBAABBExample;

  })(Example);

  AABBSweptAABBExample = (function(_super) {
    __extends(AABBSweptAABBExample, _super);

    function AABBSweptAABBExample() {
      AABBSweptAABBExample.__super__.constructor.apply(this, arguments);
      this.angle = 0;
      this.staticBox = new AABB(new Point(0, 0), new Point(112, 16));
      this.sweepBoxes = [new AABB(new Point(-64, -64), new Point(16, 16)), new AABB(new Point(0, -64), new Point(16, 16)), new AABB(new Point(64, -64), new Point(16, 16))];
      this.sweepDeltas = [new Point(0, 24), new Point(0, 48), new Point(0, 112)];
      this.tempBox = new AABB(new Point(0, 0), new Point(16, 16));
    }

    AABBSweptAABBExample.prototype.tick = function(mouseX, mouseY, elapsed) {
      var box, delta, dir, factor, i, length, sweep, _i, _len, _ref, _results;
      this.angle += 0.5 * Math.PI * elapsed;
      this.drawAABB(this.staticBox, '#666');
      factor = ((Math.cos(this.angle) + 1) * 0.5) || 1e-8;
      _ref = this.sweepBoxes;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        box = _ref[i];
        delta = this.sweepDeltas[i].clone();
        delta.x *= factor;
        delta.y *= factor;
        sweep = this.staticBox.sweepAABB(box, delta);
        dir = delta.clone();
        length = dir.normalize();
        this.drawAABB(box, '#666');
        if (sweep.hit != null) {
          this.drawRay(box.pos, dir, length, '#f00');
          this.tempBox.pos.x = box.pos.x + delta.x;
          this.tempBox.pos.y = box.pos.y + delta.y;
          this.drawAABB(this.tempBox, '#f00');
          this.tempBox.pos.x = sweep.pos.x;
          this.tempBox.pos.y = sweep.pos.y;
          this.drawAABB(this.tempBox, '#ff0');
          this.drawPoint(sweep.hit.pos, '#ff0');
          _results.push(this.drawRay(sweep.hit.pos, sweep.hit.normal, 4, '#ff0', false));
        } else {
          this.tempBox.pos.x = sweep.pos.x;
          this.tempBox.pos.y = sweep.pos.y;
          this.drawAABB(this.tempBox, '#0f0');
          _results.push(this.drawRay(box.pos, dir, length, '#0f0'));
        }
      }
      return _results;
    };

    return AABBSweptAABBExample;

  })(Example);

  MultipleAABBSweptAABBExample = (function(_super) {
    __extends(MultipleAABBSweptAABBExample, _super);

    function MultipleAABBSweptAABBExample() {
      MultipleAABBSweptAABBExample.__super__.constructor.apply(this, arguments);
      this.delta = new Point;
      this.velocity = new Point(48, 48);
      this.movingBox = new AABB(new Point(0, 0), new Point(16, 16));
      this.staticBoxes = [new AABB(new Point(-96, 0), new Point(16, 48)), new AABB(new Point(96, 0), new Point(16, 48)), new AABB(new Point(0, -64), new Point(112, 16)), new AABB(new Point(0, 64), new Point(112, 16))];
    }

    MultipleAABBSweptAABBExample.prototype.reflect = function(velocity, normal, out) {
      var dot, ux, uy, wx, wy;
      dot = velocity.x * normal.x + velocity.y * normal.y;
      ux = normal.x * dot;
      uy = normal.y * dot;
      wx = velocity.x - ux;
      wy = velocity.y - uy;
      out.x = wx - ux;
      return out.y = wy - uy;
    };

    MultipleAABBSweptAABBExample.prototype.tick = function(mouseX, mouseY, elapsed) {
      var nearest, staticBox, sweep, _i, _len, _ref;
      this.delta.x = this.velocity.x * elapsed;
      this.delta.y = this.velocity.y * elapsed;
      nearest = void 0;
      _ref = this.staticBoxes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        staticBox = _ref[_i];
        this.drawAABB(staticBox, '#666');
        sweep = staticBox.sweepAABB(this.movingBox, this.delta);
        if ((nearest == null) || sweep.time < nearest.time) {
          nearest = sweep;
        }
      }
      if (nearest.hit) {
        this.reflect(this.velocity, nearest.hit.normal, this.velocity);
      }
      this.movingBox.pos = nearest.pos;
      return this.drawAABB(this.movingBox, '#0f0');
    };

    return MultipleAABBSweptAABBExample;

  })(Example);

  $(document).ready(function() {
    var canvas, context, examples, height, mouseX, mouseY, width;
    canvas = document.body.appendChild(document.createElement('canvas'));
    canvas.width = width = +window.innerWidth;
    canvas.height = height = +window.innerHeight;
    context = canvas.getContext('2d');
    context.translate(0.5, 0.5);
    mouseX = 0;
    mouseY = 0;
    examples = [new AABBSegmentExample(context, width, height, -216), new AABBAABBExample(context, width, height, -72), new AABBSweptAABBExample(context, width, height, 72), new MultipleAABBSweptAABBExample(context, width, height, 216)];
    $(window).mousemove(function(event) {
      mouseX = event.pageX - canvas.offsetLeft;
      mouseY = event.pageY - canvas.offsetTop;
      return void 0;
    });
    return setInterval(function() {
      var example, _i, _len, _results;
      context.fillStyle = '#000';
      context.fillRect(0, 0, width, height);
      _results = [];
      for (_i = 0, _len = examples.length; _i < _len; _i++) {
        example = examples[_i];
        _results.push(example.tick(mouseX, mouseY, 1 / 30));
      }
      return _results;
    }, 1000 / 30);
  });

}).call(this);
